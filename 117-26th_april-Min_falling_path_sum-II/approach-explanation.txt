Intuition
Use the iterative DP to solve. In fact reuse the 2d array grid.
The key point to choose the smallest one in each row( after summing, not the original) as possible, if it is adjacent to the smallest one in the previous row, take the 2nd smallest.
This question is done many months ago. Here is the optimized version provided.

Approach
Define the function findmin2(vector<int>& row) to find 2 smallest numbers in a given row.
In main function minFallingPathSum(vector<vector<int>>& grid), use a nested loop to do the following
for(int i=1; i<n; i++){ // For each row starting from the second row
    auto min2=findmin2(grid[i-1]); // Find the two smallest numbers in the previous row
    for(int j=0; j<n; j++){ // For each element in the current row
        if (grid[i-1][j]==min2[0]) // If the element in the previous row is equal to the smallest number
            grid[i][j]+=min2[1]; // Add the second smallest number to the current element
        else // If the element in the previous row is not equal to the smallest number
            grid[i][j]+=min2[0]; // Add the smallest number to the current element
}
For better understanding, list the process for the testcase
[[2,2,1,2,2],[2,2,1,2,2],[2,2,1,2,2],[2,2,1,2,2],[2,2,1,2,2]]
especially, grid as status matrix during the computation

   2   2   1   2   2	 mins:1,2
   3   3   3   3   3	 mins:3,3
   5   5   4   5   5	 mins:4,5
   6   6   6   6   6	 mins:6,6
   8   8   7   8   8
ans=7
Complexity
Time complexity:
O(n2)

Space complexity:
Extra: O(n)