Intuition
First, I see that we need to form the highest-scoring set of words using given letters. Each word uses some letters and each letter has a specific score. So, I thought, we can use a recursive approach to explore all combinations of words to maximize the score.
Approach
Count Letter Frequencies

First, I thought, we should count how many times each letter appears in the letters array. This helps keep track of available letters while forming words.
Recursive Function

Then, I thought, we can use a recursive function (dfs) to explore all combinations of words.
The function checks each word one by one, deciding whether to include it in the current set or skip it.
Skip the Word

If we skip the current word, we simply call the recursive function for the next word without any changes.
Include the Word

If we want to include the current word, we first check if we have enough letters for it.
We then calculate the score of this word by summing up the scores of its letters.
After calculating the score, we call the recursive function for the next word.
Finally, we restore the letter counts to ensure that skipping this word for future calls isn't affected.
Compare Scores

We compare the scores obtained by skipping the word and including the word, and choose the maximum of the two.
Return the Result

The maximum score from all combinations is returned as the final result.
Detailed Steps
Count Letter Frequencies

Create an array cnt of size 26 (for each letter) and initialize it to zero.
Iterate over each letter in letters and increase the count in cnt.
Define Recursive Function

Define a function dfs which takes the current index of words and returns the maximum score possible from that index onwards.
Handle Base Case

If the current index is equal to the length of words, return 0 as there are no more words to consider.
Recursive Calls

Call dfs for the next index without including the current word (this is the "skip" case).
Calculate the score for the current word and check if it's valid (i.e., we have enough letters for it).
If valid, call dfs for the next index including the current word (this is the "include" case) and add the word's score.
Restore the counts of letters used in the current word for further exploration.
Compare and Return

Compare the scores obtained from including and skipping the word and return the maximum.
Example Walkthrough
Consider,
words = ["dog","cat","dad","good"]["dog", "cat", "dad", "good"]["dog","cat","dad","good"]
letters = ["a","a","c","d","d","d","g","o","o"]["a","a","c","d","d","d","g","o","o"]["a","a","c","d","d","d","g","o","o"]
scores = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0][1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0][1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]

Count the letter frequencies: a:2,a:2,a:2, c:1,c:1,c:1, d:3,d:3,d:3, g:1,g:1,g:1, o:2.o:2.o:2.
Start with the first word "dog""dog""dog":
Skip "dog""dog""dog": Explore ["cat","dad","good"]["cat", "dad", "good"]["cat","dad","good"].
Include "dog""dog""dog" if valid: Update counts and score, then explore ["cat","dad","good"]["cat", "dad", "good"]["cat","dad","good"].
Continue this process for each word.
Finally, the maximum score of valid sets is found.
Complexity
Time Complexity: O(2^N)
where N is the number of words and M is the average length of the words.

Space Complexity: O(N+M)
for the recursion stack and letter count.