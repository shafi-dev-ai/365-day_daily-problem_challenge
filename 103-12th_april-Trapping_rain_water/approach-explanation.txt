Question:
Basically we are going to see whether we can trap the water or not.
within the given area.

Approach 1.(2 Pointer)
A basic idea comes into peoples mind if two walls are there and we want want to fill water within that wall we just have to fill the water till min of two wall right if it exceeds the value ,it will overflow.

So, we can set 2 pointers left_max,right_max and check which side is greater,if one side is greater iterate on other side because at the min side the water will be filled at its limit. and iterate till pointer is lower than the other one.

ex.height = [0,1,0,2,1,0,1,3,2,1,2,1]

left_max=0,right_max=1,count=0
amount of water is calculate using subtractring wall length with min(right_max,left_max);

iterate left_side.
count=0,left_max=0,right_max=1

iterate left_side.
count=0,left_max=1,right_max=1

iterate left_side.
count=1,left_max=1,right_max=1

iterate left_side.
count=2,left_max=2,right_max=1

iterate right_side.
count=2,left_side=2,right_side=2

iterate left_side.
count=3,left_side=2,right_side=2

iterate left_side.
count=5,left_side=2,right_side=2

iterate left_side.
count=5,left_side=3,right_side=2

iterate right_side.
count=6,left_side=3,right_side=2

iterate right_side.
count=6,left_side=3,right_side=2

so thats the amount of water is found.

Intuition
Leetcode's classical problem.
Try monotonic stack method.

The idea is using monotonic stack for index m to find the right wall height[r] & left wall height[l]; this region should has water amount above the bottom height[m] of min(height[r]-height[m], height[l]-height[m])*(r-l-1)

Approach
Set container st as monotonic stack; C++ vector/Python list is very suitable.
Use a loop from r=0 to n-1 as right index
while (st is not empty) and (height[st.top()]<height[r]) do the following
m=st.top();
st.pop();
if (st.empty()) break;
l=st.top();
h= min(height[r]-height[m], height[l]-height[m]);
w= r-l-1;
ans+=h*w;
push r to st
return ans
Complexity
Time complexity:
O(n)O(n)O(n)

Space complexity:
O(n)O(n)O(n)